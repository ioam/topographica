"""
Example of a LISSOM-based color map (with ON/OFF channels).

Intended to be a close (but approximate) match to the single-eye color
map simulation from Judah Ben De Paula, Modeling the Self-Organization
of Color Selectivity in the Visual Cortex, PhD thesis, Department of
Computer Sciences, The University of Texas at Austin, 2007.  Known
differences include:

 - The default_density is smaller for practicality
 - The lateral inhibitory radius is up to 0.5 matrix units greater
   than in the thesis, because Topographica enforces good
   circular-shaped CF outlines.
 - Input patterns are evaluated on the entire retina, instead of only up
   to bounds_multiplier=2.5 times the gaussian sigma in the book
 - Initial weight patterns are not smoothed around the edges, unlike
   smooth_circular_outlines=True and smooth_circular_radius_trim=-0.25
   used in the thesis
 - Initial weight patterns are all random within a gaussian envelope
   rather than random afferent and Gaussian lateral weights used in
   the thesis
 - Inhibitory weight pruning is disabled
 - The inhibitory radius is smaller (for practicality) than in the
   thesis

There may be other small differences, as this file has not yet been
compared exhaustively to the original simulations.

Can be reproduced by lissom.ty, but kept as a simpler color-only
example.
"""
__version__='$Revision: 8562 $'


from math import pi, sqrt

import numpy

from topo import learningfn,numbergen,transferfn,pattern,projection,responsefn,sheet

import topo.learningfn.optimized
import topo.learningfn.projfn
import topo.transferfn.optimized
import topo.pattern.random
import topo.pattern.image
import topo.responsefn.optimized
import topo.sheet.lissom
import topo.sheet.optimized


### Specify weight initialization, response function, and learning function
projection.CFProjection.cf_shape=pattern.Disk(smoothing=0.0)
projection.CFProjection.weights_generator=pattern.Constant()
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]
projection.SharedWeightCFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()

### Default for tutorial
pattern.Line.scale=0.9
pattern.Gaussian.size=0.08333
pattern.Gaussian.aspect_ratio=4.0


### Input patterns and LGN sheets

eyes=['']
center_polarities=['On','Off']
rg_cone_types=['Red','Green']
rgb_cone_types=['Red','Green','Blue']
opponent_types=['Red-Green','Green-Red','Blue-RedGreen','Luminosity']
lags=['']

ids=4.0
num_inputs=1
input_type=pattern.image.FileImage

# Convenience variable; number of afferent connections to V1
num_aff=len(center_polarities)*len(eyes)*len(lags)*len(opponent_types)

for e in eyes:
    for n in lags:
        default_retina_density=locals().get('default_retina_density',48.0)
        scalingfactor=[1.4*0.9,1.4,1.4*0.97] # from Judah's PhD
        for cone in rgb_cone_types:
            image_filenames=["images/mcgill/foliage_b/%02d_%d.png"%(i,rgb_cone_types.index(cone)) for i in xrange(1,26)]
            inputs=[input_type(filename=f, size=10.0,
                               x=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=12),
                               y=numbergen.UniformRandom(lbound=-0.75,ubound=0.75,seed=34),
                               orientation=numbergen.UniformRandom(lbound=-pi,ubound=pi,seed=56),
                               scale=         2.0-numbergen.UniformRandom(lbound=0,ubound=2,seed=78)*scalingfactor[rgb_cone_types.index(cone)] \
                               if e=='Right' else numbergen.UniformRandom(lbound=0,ubound=2,seed=78)*scalingfactor[rgb_cone_types.index(cone)])
                    for f in image_filenames]

            input_composite=pattern.Selector(generators=inputs)

            topo.sim[e+cone+'Retina'+n]=sheet.GeneratorSheet(
                nominal_density=default_retina_density,
                input_generator=input_composite,
                period=1.0, phase=0.05,
                nominal_bounds=sheet.BoundingBox(radius=0.5+0.27083+0.375))

        for l in center_polarities:
            for opponent in opponent_types:
                topo.sim[e+opponent+' LGN'+l+n]=sheet.CFSheet(
                    nominal_density=24.0,row_precedence=0.6 if l=='On' else 0.7,
                    nominal_bounds=sheet.BoundingBox(radius=0.5+0.27083),
                    output_fns=[transferfn.PiecewiseLinear(lower_bound=0.0,upper_bound=1.0)],
                    measure_maps=False)



### Sheets
topo.sim['V1'] = sheet.SettlingCFSheet(
    nominal_density=locals().get('default_density',48.0),tsettle=9,
    nominal_bounds=sheet.BoundingBox(radius=0.5),
    output_fns=[transferfn.PiecewiseLinear(lower_bound=0.076,upper_bound=0.626)])


### Connections

# DoG weights for the LGN
centerg   = pattern.Gaussian(size=0.07385,aspect_ratio=1.0,output_fns=[transferfn.DivisiveNormalizeL1()])
surroundg = pattern.Gaussian(size=0.29540,aspect_ratio=1.0,output_fns=[transferfn.DivisiveNormalizeL1()])

for e in eyes:
    for n in lags:
        for l in center_polarities:
            for cone in rg_cone_types:
                topo.sim.connect(e+cone+'Retina'+n,
                                 e+cone+'-'+rg_cone_types[rg_cone_types.index(cone)-1]+' LGN'+l+n, delay=0.05,
                                 connection_type=projection.SharedWeightCFProjection, strength=4.7*(-1)**center_polarities.index(l),
                                 nominal_bounds_template=sheet.BoundingBox(radius=0.375),
                                 name='AfferentCenter', weights_generator=centerg)

                topo.sim.connect(e+cone+'Retina'+n,
                                 e+rg_cone_types[rg_cone_types.index(cone)-1]+'-'+cone+' LGN'+l+n, delay=0.05,
                                 connection_type=projection.SharedWeightCFProjection, strength=4.7*(-1)**(1+center_polarities.index(l)),
                                 nominal_bounds_template=sheet.BoundingBox(radius=0.375),
                                 name='AfferentSurround', weights_generator=surroundg)

                topo.sim.connect(e+cone+'Retina'+n,
                                 e+'Blue-RedGreen'+' LGN'+l+n, delay=0.05,
                                 connection_type=projection.SharedWeightCFProjection, strength=4.7*(-1)**(1+center_polarities.index(l))/2,
                                 nominal_bounds_template=sheet.BoundingBox(radius=0.375),
                                 name='AfferentCenter'+cone, weights_generator=centerg)

            topo.sim.connect(e+'Blue'+'Retina'+n,
                             e+'Blue-RedGreen'+' LGN'+l+n, delay=0.05,
                             connection_type=projection.SharedWeightCFProjection, strength=4.7*(-1)**center_polarities.index(l),
                             nominal_bounds_template=sheet.BoundingBox(radius=0.375),
                             name='AfferentCenter'+'Blue', weights_generator=centerg)

            for cone in rgb_cone_types:
                topo.sim.connect(e+cone+'Retina'+n,
                                 e+'Luminosity LGN'+l+n, delay=0.05,
                                 connection_type=projection.SharedWeightCFProjection, strength=4.7*(-1)**center_polarities.index(l)/3,
                                 nominal_bounds_template=sheet.BoundingBox(radius=0.375),
                                 name='AfferentCenter'+cone, weights_generator=centerg)

                topo.sim.connect(e+cone+'Retina'+n,
                                 e+'Luminosity LGN'+l+n, delay=0.05,
                                 connection_type=projection.SharedWeightCFProjection, strength=4.7*(-1)**(1+center_polarities.index(l))/3,
                                 nominal_bounds_template=sheet.BoundingBox(radius=0.375),
                                 name='AfferentSurround'+cone, weights_generator=surroundg)

            for opponent in opponent_types:
                topo.sim.connect(e+opponent+' LGN'+l+n, 'V1', delay=0.05, dest_port=('Activity', 'JointNormalize', 'Afferent'),
                                 connection_type=projection.CFProjection, strength=1.0, name=e+opponent+' LGN'+l+'Afferent'+n,
                                 weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.27083),
                                 nominal_bounds_template=sheet.BoundingBox(radius=0.27083),
                                 learning_rate=0.9590/num_aff/ids)



topo.sim.connect('V1','V1',delay=0.05,name='LateralExcitatory',
                 connection_type=projection.ResizableCFProjection,strength=1.2,
                 weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.10417),
                 nominal_bounds_template=sheet.BoundingBox(radius=0.10417),learning_rate=2.55528/ids)

topo.sim.connect('V1','V1',delay=0.05,name='LateralInhibitory',
                 connection_type=projection.CFProjection,strength=-1.75,
                 weights_generator=pattern.random.GaussianCloud(gaussian_size=2*0.22917),
                 nominal_bounds_template=sheet.BoundingBox(radius=0.22917),learning_rate=1.80873/ids/5)


### Actions scheduled to occur as the simulation proceeds.
sheet.lissom.schedule_events("topo.sim['V1']",st=1.0/2.0,
                             aff_name="Afferent",ids=ids,
                             increase_inhibition=True)

# default locations for model editor
vs = [None]*(num_aff-1) + ['V1'] + [None]*(num_aff)

ls=[]
for n in lags:
    for e in eyes:
        for opponent in opponent_types:
            for l in center_polarities:
                ls += [e+opponent+' LGN'+l+n]+[None]


es=[]
for n in lags:
   for e in eyes:
        for cone in rgb_cone_types:
            es += [None]*(len(center_polarities)/2) + [e+cone+'Retina'+n,None] + \
                  [None]*(len(center_polarities)/2)

topo.sim.grid_layout([vs,ls,es], xstep=70/len(eyes), ystep=200, item_scale=0.75/len(eyes))



### Set up appropriate defaults for analysis

# Measure feature maps based on unthresholded initial response for
# speed and reliability
from topo.analysis.featureresponses import MeasureResponseCommand
MeasureResponseCommand.durations=[0.175]
MeasureResponseCommand.pattern_response_fn.apply_output_fns=False
