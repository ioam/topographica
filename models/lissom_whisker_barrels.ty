"""
Topographica (see topographica.org) model of a somatotopically aligned
map of whisker deflection direction, as measured in layer 2/3 rat
somatosensory cortex.  Replicates results from:

  Wilson SP, Law JS, Mitchinson B, Prescott TJ, Bednar JA (2010)
  Modeling the emergence of whisker direction maps in rat barrel cortex.
  PLoS ONE 5(1): e8778. doi:10.1371/journal.pone.0008778

Running this script with the default parameters will reproduce the
main result in Figure 3a of Wilson et al. (2010). Run it from a
terminal using the following:

$ ./topographica examples/lissom_whisker_barrels.ty
"""


from math import pi, sqrt

import numpy
import param

from topo import learningfn,numbergen,transferfn,pattern,projection,responsefn,sheet,coordmapper

import topo.learningfn.optimized
import topo.learningfn.projfn
import topo.transferfn.optimized
import topo.pattern.random
import topo.responsefn.optimized
import topo.sheet.lissom


# Parameters that can be passed on the command line using -p
from topo.misc.commandline import global_params as p
p.add(

    Wx=param.Integer(default=5,bounds=(1,None),doc="""
        Number of whiskers per column."""),

    Wy=param.Integer(default=5,bounds=(1,None),doc="""
        Number of whiskers per row."""),

    barrel_density=param.Integer(default=5,bounds=(0,None),doc="""
        The nominal_density per barrel; must be an odd integer."""))

assert (p.barrel_density+1)%2==0, "barrel_density must be odd."


# Map of maximally-effective directions (MEDs) for Layer_4
MEDs = numpy.tile(numpy.reshape(
           numpy.linspace(start=0.0,stop=2.0*pi,num=p.barrel_density**2,endpoint=False),
           [1.0*p.barrel_density,1.0*p.barrel_density]),(p.Wx*1.0,p.Wy*1.0))

# Control the random seed
random_seed_generator=numbergen.UniformRandom(lbound=0,ubound=1000,seed=25)


class Whiskers(pattern.PatternGenerator):
    """
    Generate a pattern of activity across a simulated layer 4 by
    calculating the response of directionally tuned layer 4 neurons to
    a multi-whisker stimulus pattern.  See Wilson et al (2010),
    equation 1.
    """

    whisker = param.Integer(default=p.Wx*p.Wy, doc="""
        Activate either a single whisker by number, or the entire array if Wx*Wy.""")

    kappa = param.Number(default=1e7, doc="""
	Inverse of variance, applied to each whisker deflection angle separately.""")


    def whisker_to_barrel(self,pattern,density):
	"""
	Streches a pattern defined in whisker units (e.g. 5x5)
	to the size of the sheet (e.g. 25x25 or 21x21).
	"""
	return numpy.repeat(numpy.repeat(pattern,density,0),density,1)


    def distribute_angles(self,original_angles,k=1e7):
        """
	Adds noise to each whisker deflection, distributed under a Von Mises distribution.
	See Wilson et al (2010): `Methods; Stimulating the Whiskers' for details.
	"""
        if numpy.array(original_angles).size==1:
            return numbergen.VonMisesRandom(mu=original_angles,kappa=k, seed=random_seed_generator())()
        else:
            x = numpy.zeros(original_angles.shape)
            for i in numpy.arange(original_angles.shape[0]):
                for j in numpy.arange(original_angles.shape[1]):
                    x[i,j]=numbergen.VonMisesRandom(mu=original_angles[i,j],
						    kappa=k,seed=random_seed_generator())()
            return x


    # Should probably rename orientation to deflection for clarity
    def function(self,params):
        if (self.whisker < p.Wx*p.Wy):
            magnitudes = numpy.zeros([p.Wx*1.0,p.Wy*1.0])
            magnitudes[numpy.floor(self.whisker/p.Wy)][numpy.fmod(self.whisker,p.Wy)]=1.0
            m = self.whisker_to_barrel(magnitudes,p.barrel_density)
            dirs = numpy.ones([p.Wx*1.0,p.Wy*1.0])*self.orientation
        else:
            m = self.whisker_to_barrel(LinearBoundary(xdensity=1.0,ydensity=1.0,
		    x=self.x,y=self.y,bounds=sheet.BoundingBox(radius=0.5*p.Wx),
		    size=self.size,orientation=self.orientation)(),p.barrel_density)

        dirs = self.distribute_angles(numpy.ones([p.Wx*1.0,p.Wy*1.0])*self.orientation,self.kappa)
        directions = self.whisker_to_barrel(dirs,p.barrel_density)

        return m*((1.0+(numpy.cos(abs(directions-MEDs))))/2.0)



class IntegerMapper(coordmapper.CoordinateMapperFn):
    """
    Maps the center of the afferent connection field for each cortical
    neuron to the center of the isomorphic `barrel' region on the
    Layer 4 sheet.
    """

    def __call__(self,x,y):
        return round(x),round(y)



# Should replace this with an equivalent call to pattern.HalfPlane
class LinearBoundary(pattern.PatternGenerator):
    """
    Stimulus shape used to stimulate the whiskers.
    See Wilson et al (2010): `Methods; Stimulating the Whiskers'
    for details.
    """

    def function(self,params):
        self.pattern_x+=self.offset
        return numpy.where(self.pattern_x<=0.0,1.0,0.0)




### Specify weight initialization, response function, and learning function
projection.CFProjection.cf_shape=pattern.Constant()
projection.CFProjection.response_fn=responsefn.optimized.CFPRF_DotProduct_opt()
projection.CFProjection.learning_fn=learningfn.optimized.CFPLF_Hebbian_opt()
projection.CFProjection.weights_output_fns=[transferfn.optimized.CFPOF_DivisiveNormalizeL1_opt()]

pattern.random.seed(101)

### Sheets

topo.sim['Layer_4']=sheet.GeneratorSheet(nominal_density=p.barrel_density*1.0,
    nominal_bounds=sheet.BoundingBox(points=[(-p.Wy/2.0,-p.Wx/2.0),(p.Wy/2.0,p.Wx/2.0)]),
    input_generator=Whiskers(orientation=numbergen.UniformRandom(lbound=0.0,ubound=2.0*pi,seed=64),
			     size=1e7,scale=0.25,kappa=3.0,
			     x = numbergen.UniformRandom(lbound=-p.Wx/2.0,ubound=p.Wx/2.0,seed=73),
			     y = numbergen.UniformRandom(lbound=-p.Wx/2.0,ubound=p.Wx/2.0,seed=74)))

topo.sim['Layer2_3']=sheet.lissom.LISSOM(nominal_density=21.0,tsettle=9,
    nominal_bounds=sheet.BoundingBox(points=[(-p.Wy/2.0,-p.Wx/2.0),(p.Wy/2.0,p.Wx/2.0)]))



### Connections

# Feed-forward (afferent) connections
topo.sim.connect(
    'Layer_4','Layer2_3',delay=0.05,strength=1.0,name='Afferent',
    dest_port=('Activity','JointNormalize', 'Afferent'),
    connection_type=projection.CFProjection,learning_rate=1.0,
    nominal_bounds_template=sheet.BoundingBox(radius=0.5),
    weights_generator=pattern.random.UniformRandom(),
    coord_mapper=IntegerMapper())

# Short-range lateral excitatory connections
topo.sim.connect(
    'Layer2_3','Layer2_3',delay=0.05,strength=1.0,name='LateralExcitatory',
    connection_type=projection.CFProjection,learning_rate=0.0,
    weights_generator=pattern.random.UniformRandom(),
    nominal_bounds_template=sheet.BoundingBox(radius=0.05))

# Long-range lateral inhibitory connections
topo.sim.connect(
    'Layer2_3','Layer2_3',delay=0.05,strength=-1.0,name='LateralInhibitory',
    connection_type=projection.CFProjection,learning_rate=1.0,
    weights_generator=pattern.random.UniformRandom(),
    nominal_bounds_template=sheet.BoundingBox(radius=2.0))



### Whisker-specific plots

from topo.plotting.plotgroup import create_plotgroup
from topo.analysis.featureresponses import Feature,FeatureMaps,PatternPresenter,Subplotting
from topo.base.sheetview import SheetView

def measure_deflection_pref(num_deflection=8,scale=0.3,offset=0.0,display=False,
                            weighted_average=False,
                            pattern_presenter=PatternPresenter(
                                pattern_generator=Whiskers(),
                                apply_output_fns=False,duration=0.175)):
    """
    Measure deflection maps by collating the responses to a set of
    whisker deflections in different directions.
    """

    if num_deflection <= 0:
        raise ValueError("num_deflection must be greater than 0")

    else:
         step_deflection=pi/num_deflection

    feature_values=[Feature(name="whisker",range=(0, (p.Wx*p.Wy)-1.0),step=1,cyclic=False),
		    Feature(name="orientation",range=(0.0,2*pi),step=step_deflection,cyclic=True)]

    param_dict={"scale":scale,"offset":offset}
    x=FeatureMaps(feature_values)
    x.collect_feature_responses(pattern_presenter,param_dict,display,weighted_average)

    Subplotting.set_subplots("Orientation",force=False)


pg=create_plotgroup(name='Deflection Preference',category="Preference Maps",
		    doc='Measure preference for whiskers and their directions.',
		    pre_plot_hooks=[measure_deflection_pref])
pg.add_plot('Direction Preference',[('Hue','OrientationPreference')])
pg.add_plot('Direction Preference&Selectivity',[('Hue','OrientationPreference'),('Confidence','OrientationSelectivity')])
pg.add_plot('Direction Selectivity',[('Strength','OrientationSelectivity')])
pg.add_plot('Whisker Preference',[('Strength','WhiskerPreference')])
pg.add_plot('Whisker Selectivity',[('Strength','WhiskerSelectivity')])
pg.add_static_image('Color Key','topo/command/dfl_key_white_vert.png')



# Color Layer 4 input units by their directional tuning
sheet=topo.sim['Layer_4']
new_view=SheetView((MEDs/(2.0*pi),sheet.bounds), sheet.name,sheet.precedence)
sheet.sheet_views['OrientationPreference']=new_view


# Use commands like the following to run the model and plot a map
#topo.sim.run(5000)
#measure_deflection_pref()
#(or select Direction Preference in the Plotting menu)
